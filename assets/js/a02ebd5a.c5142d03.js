"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[486],{1155:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>x,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(5893),i=t(1151);const a={},o="\u96b1\u85cf\u9762\u53bb\u9664",s={id:"3d/3",title:"\u96b1\u85cf\u9762\u53bb\u9664",description:"\u6211\u5011\u73fe\u5728\u53ef\u4ee5\u6e32\u67d3\u5e73\u9762\uff0c\u4e26\u4e14\u9078\u64c7\u4e0d\u53bb\u6e32\u67d3\u90a3\u4e9b\u80cc\u5c0d\u6211\u5011\u7684\u9762\u3002\u4f46\u6709\u66f4\u591a\u7684\u9762\uff0c\u662f\u88ab\u5176\u4ed6\u9762\u906e\u64cb\u4f4f\u4e86\uff0c\u9019\u4e9b\u9762\u4e5f\u4e0d\u61c9\u8a72\u88ab\u6e32\u67d3\u3002\u9019\u5c31\u662f\u96b1\u85cf\u9762\u53bb\u9664\uff08Hidden Surface Removal\uff09\u7684\u554f\u984c\u3002",source:"@site/coding/3d/3.md",sourceDirName:"3d",slug:"/3d/3",permalink:"/blog/coding/3d/3",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2. \u67f5\u683c\u5316\u4e09\u89d2\u5f62\u548c\u80cc\u9762\u5254\u9664",permalink:"/blog/coding/3d/2"},next:{title:"4. \u900f\u8996\u6295\u5f71",permalink:"/blog/coding/3d/4"}},c={},l=[{value:"Z-Buffer",id:"z-buffer",level:2},{value:"\u6750\u8cea\u8cbc\u5716",id:"\u6750\u8cea\u8cbc\u5716",level:2}];function f(e){const n={code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"\u96b1\u85cf\u9762\u53bb\u9664",children:"\u96b1\u85cf\u9762\u53bb\u9664"}),"\n",(0,r.jsx)(n.p,{children:"\u6211\u5011\u73fe\u5728\u53ef\u4ee5\u6e32\u67d3\u5e73\u9762\uff0c\u4e26\u4e14\u9078\u64c7\u4e0d\u53bb\u6e32\u67d3\u90a3\u4e9b\u80cc\u5c0d\u6211\u5011\u7684\u9762\u3002\u4f46\u6709\u66f4\u591a\u7684\u9762\uff0c\u662f\u88ab\u5176\u4ed6\u9762\u906e\u64cb\u4f4f\u4e86\uff0c\u9019\u4e9b\u9762\u4e5f\u4e0d\u61c9\u8a72\u88ab\u6e32\u67d3\u3002\u9019\u5c31\u662f\u96b1\u85cf\u9762\u53bb\u9664\uff08Hidden Surface Removal\uff09\u7684\u554f\u984c\u3002"}),"\n",(0,r.jsxs)(n.p,{children:["\u6211\u5011\u53ef\u4ee5\u9078\u64c7\u5148\u756b\u96e2\u6211\u5011\u6bd4\u8f03\u9060\u7684\u5e73\u9762\uff0c\u518d\u756b\u6bd4\u8f03\u8fd1\u7684\u9762\u3002\u9019\u6a23\uff0c\u5f8c\u756b\u7684\u9762\u6703\u8986\u84cb\u4e4b\u524d\u756b\u7684\u90e8\u5206\u3002\u9019\u6a23\u7684\u65b9\u6cd5\u53eb\u505a",(0,r.jsx)(n.code,{children:"Painter's algorithm"}),"\u3002\u4f46\u5047\u5982\u6211\u5011\u8981\u756b\u7684\u5716\u5f62\u4e2d\uff0c\u5404\u500b\u9762\u5b58\u5728\u4ea4\u53c9\uff0c\u9019\u6a23\u7684\u65b9\u6cd5\u5c31\u4e0d\u9069\u7528\u4e86\u3002"]}),"\n",(0,r.jsx)(n.p,{children:"\u8003\u616e\u4e00\u500b\u5834\u666f"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/03-zbuffer/d493c52da4cabe9a057c26f696784956.png",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"\u5982\u679c\u5f9e\u6b63\u4e0a\u65b9\u5f80\u4e0b\u6e32\u67d3\uff0c\u6548\u679c\u61c9\u8a72\u662f\u9019\u6a23\u7684\uff1a"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/ssloy/tinyrenderer/gh-pages/img/03-zbuffer/023668cb8ea97f59bf87d982c1e8b030.png",alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["\u5982\u679c\u9084\u4f7f\u7528 ",(0,r.jsx)(n.code,{children:"Painter's algorithm"}),"\uff0c\u60f3\u8981\u9054\u5230\u9019\u500b\u6548\u679c\u6703\u5f88\u56f0\u96e3\u3002"]}),"\n",(0,r.jsx)(n.h2,{id:"z-buffer",children:"Z-Buffer"}),"\n",(0,r.jsx)(n.p,{children:"\u4e00\u7a2e\u89e3\u6c7a\u601d\u8def\u662f\uff0c\u6211\u5011\u7528\u4e00\u500b buffer \u4f86\u8a18\u9304\u9019\u500b\u50cf\u7d20\u4e2d\uff0c\u96e2\u6211\u5011\u6700\u8fd1\u7684\u9762\u7684\u6df1\u5ea6\u3002\u6211\u5011\u6bcf\u6b21\u756b\u4e00\u500b\u50cf\u7d20\u7684\u6642\u5019\uff0c\u90fd\u53bb\u6aa2\u67e5\u9019\u500b buffer\uff0c\u5982\u679c\u8981\u756b\u7684\u9762\u76f8\u6bd4 buffer \u4e2d\u8a18\u9304\u7684\u96e2\u6211\u5011\u66f4\u9060\uff0c\u90a3\u9ebc\u6211\u5011\u5c31\u4e0d\u756b\u3002\u9019\u500b buffer \u5c31\u53eb\u505a Z-Buffer\u3002\u6211\u5011\u4e4b\u524d\u8a08\u7b97\u4e86\u50cf\u7d20\u5c0d\u65bc\u4e09\u89d2\u5f62\u7684\u91cd\u5fc3\u5750\u6a19\uff0c\u6211\u5011\u53ef\u4ee5\u5229\u7528\u9019\u500b\u91cd\u5fc3\u5750\u6a19\uff0c\u4f86\u8a08\u7b97\u9019\u500b\u50cf\u7d20\u5c0d\u61c9\u7684\u6df1\u5ea6\uff0c\u540c\u6a23\u662f\u505a\u51f8\u7d44\u5408\uff0c\u53ea\u4e0d\u904e\u9019\u88e1\u662f\u505a z \u8ef8\u7684\u51f8\u7d44\u5408\u3002"}),"\n",(0,r.jsxs)(n.p,{children:["\u6211\u5011\u7684 buffer \u6703\u662f\u4e00\u500b\u4e00\u7dad\u7684\u6578\u7d44\uff0c\u4f46\u6211\u5011\u7684\u5c4f\u5e55\u662f\u4e8c\u7dad\u7684\u3002\u6240\u4ee5\u5728\u5132\u5b58\u6642\uff0c\u6211\u5011\u6703\u628a\u4e8c\u7dad\u62c9\u6210\u4e00\u7dad\u3002\u6211\u5011\u53ef\u4ee5\u7528 ",(0,r.jsx)(n.code,{children:"x + y * width"})," \u4f86\u8a08\u7b97\u4e00\u500b\u4e8c\u7dad\u5750\u6a19\u5c0d\u61c9\u7684\u4e00\u7dad\u5750\u6a19\u3002"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn triangle(\n    v0: &Vertex<i32>,\n    v1: &Vertex<i32>,\n    v2: &Vertex<i32>,\n    imgbuf: &mut TGAImage,\n    color: &TGAColour,\n    zbuffer: &mut Vec<f32>,\n) {\n    // to make sure the min is not negative\n    let boxmin_x = max(0, min(v0.x, min(v1.x, v2.x)));\n    // to make sure the max is not out of the image\n    let boxmin_y = max(0, min(v0.y, min(v1.y, v2.y)));\n    let boxmax_x = min(imgbuf.width() as i32 - 1, max(v0.x, max(v1.x, v2.x)));\n    let boxmax_y = min(imgbuf.height() as i32 - 1, max(v0.y, max(v1.y, v2.y)));\n\n    for x in boxmin_x..=boxmax_x {\n        for y in boxmin_y..=boxmax_y {\n            let p = Vertex { x, y, z: 0 };\n            let bc = barycentric(v0, v1, v2, &p);\n            if bc[0] < 0.0 || bc[1] < 0.0 || bc[2] < 0.0 {\n                continue;\n            }\n\n            let z = v0.z as f32 * bc[0] + v1.z as f32 * bc[1] + v2.z as f32 * bc[2];\n            let idx = (x + y * WIDTH as i32) as usize;\n            if idx >= zbuffer.len() {\n                println!("idx: {}", idx);\n                println!("x: {}, y: {}", x, y);\n            }\n            if zbuffer[idx] < z {\n                zbuffer[idx] = z;\n                imgbuf.put(x as u16, y as u16, &color);\n            }\n        }\n    }\n}\n\nfn main() {\n    let mut image = TGAImage::new(WIDTH, HEIGHT, Format::RGB);\n    let model = Model::load("./obj/african_head.obj").unwrap();\n    let light_dir = Vertex {\n        x: 0.0,\n        y: 0.0,\n        z: -1.0,\n    };\n    let mut zbuffer = vec![std::f32::MIN; (WIDTH * HEIGHT) as usize];\n    for i in 0..model.faces_len() {\n        let face = model.get_face(i);\n        let ver = [\n            model.get_vert(face[0]),\n            model.get_vert(face[1]),\n            model.get_vert(face[2]),\n        ];\n        let mut n = (ver[2] - ver[0]) ^ (ver[1] - ver[0]);\n        n.normalize();\n        let intensity = n * light_dir;\n        if intensity > 0.0 {\n            let screen_coords = [\n                world_to_screen(&ver[0]),\n                world_to_screen(&ver[1]),\n                world_to_screen(&ver[2]),\n            ];\n            let color = (intensity * 255.0) as u8;\n            let color = TGAColour::new(color, color, color, 255);\n            triangle(\n                &screen_coords[0],\n                &screen_coords[1],\n                &screen_coords[2],\n                &mut image,\n                &color,\n                &mut zbuffer,\n            );\n        }\n    }\n    image.flip_vertically();\n    image.write("output.tga", true);\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"alt text",src:t(3752).Z+"",width:"800",height:"800"})}),"\n",(0,r.jsx)(n.h2,{id:"\u6750\u8cea\u8cbc\u5716",children:"\u6750\u8cea\u8cbc\u5716"}),"\n",(0,r.jsxs)(n.p,{children:["\u73fe\u5728\u6211\u5011\u53ef\u4ee5\u6b63\u78ba\u8655\u7406\u6a21\u578b\u4e2d\u7684\u524d\u5f8c\u95dc\u4fc2\u4e86\u3002\u4f46\u662f\u6211\u5011\u7684\u6a21\u578b\u770b\u8d77\u4f86\u9084\u662f\u5f88\u55ae\u8abf\u3002\u6211\u5011\u53ef\u4ee5\u4f7f\u7528\u6750\u8cea\u8cbc\u5716\uff08Texture Mapping\uff09\u4f86\u8b93\u6a21\u578b\u770b\u8d77\u4f86\u66f4\u771f\u5be6\u3002\u5728 obj \u6587\u4ef6\u4e2d\uff0c",(0,r.jsx)(n.code,{children:"vt"})," \u8868\u793a\u7684\u662f\u5c0d\u61c9\u4e09\u89d2\u5f62\u9802\u9ede\u7684\u6750\u8cea\u5750\u6a19\u3002\u800c\u4e09\u89d2\u5f62\u4e2d\u9593\u7684\u9ede\u7684\u6750\u8cea\u5750\u6a19\uff0c\u540c\u6a23\u53ef\u4ee5\u7528\u91cd\u5fc3\u5750\u6a19\u4f86\u8a08\u7b97\u3002\u4e26\u4e14\u70ba\u4e86\u8b93\u6a21\u578b\u986f\u5f97\u66f4\u7acb\u9ad4\uff0c\u6211\u5011\u628a\u5404\u500b\u89d2\u5ea6\u7684\u53cd\u5149\u5f37\u5ea6\u4e58\u4e0a\u6750\u8cea\u7684\u984f\u8272\uff0c\u4f86\u5f97\u5230\u4e0d\u540c\u5149\u7167\u89d2\u5ea6\u4e0b\u7684\u984f\u8272\u3002"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn triangle(\n    v0: &Vertex<f32>,\n    v1: &Vertex<f32>,\n    v2: &Vertex<f32>,\n    imgbuf: &mut TGAImage,\n    zbuffer: &mut Vec<f32>,\n    intensity: f32,\n    texture: &TGAImage,\n    p1: &Vertex<f32>,\n    p2: &Vertex<f32>,\n    p3: &Vertex<f32>,\n) {\n    // to make sure the min is not negative\n    let boxmin_x = 0.0_f32.max(v0.x.min(v1.x.min(v2.x))) as i32;\n    // to make sure the max is not out of the image\n    let boxmin_y = 0.0_f32.max(v0.y.min(v1.y.min(v2.y))) as i32;\n    let boxmax_x = (imgbuf.width() as f32 - 1.0).min(v0.x.max(v1.x.max(v2.x))) as i32;\n    let boxmax_y = (imgbuf.height() as f32 - 1.0).min(v0.y.max(v1.y.max(v2.y))) as i32;\n\n    for x in boxmin_x..=boxmax_x {\n        for y in boxmin_y..=boxmax_y {\n            let p = Vertex {\n                x: x as f32,\n                y: y as f32,\n                z: 0.0,\n            };\n            let bc = barycentric(v0, v1, v2, &p);\n            if bc[0] < 0.0 || bc[1] < 0.0 || bc[2] < 0.0 {\n                continue;\n            }\n            let color = {\n                let x = (p1.x as f32 * bc[0] + p2.x as f32 * bc[1] + p3.x as f32 * bc[2])\n                    * texture.width() as f32;\n                let y = (p1.y as f32 * bc[0] + p2.y as f32 * bc[1] + p3.y as f32 * bc[2])\n                    * texture.height() as f32;\n                texture.get(x as u16, y as u16).unwrap() * intensity\n            };\n\n            let z = v0.z as f32 * bc[0] + v1.z as f32 * bc[1] + v2.z as f32 * bc[2];\n            let idx = (x + y * WIDTH as i32) as usize;\n            if zbuffer[idx] < z {\n                zbuffer[idx] = z;\n                imgbuf.put(x as u16, y as u16, &color);\n            }\n        }\n    }\n}\n\nfn world_to_screen(v: &Vertex<f32>) -> Vertex<f32> {\n    Vertex {\n        x: (0.5 + (v.x + 1.0) * WIDTH as f32 / 2.0),\n        y: (0.5 + (v.y + 1.0) * HEIGHT as f32 / 2.0),\n        z: v.z,\n    }\n}\n\nfn main() {\n    let mut image = TGAImage::new(WIDTH, HEIGHT, Format::RGB);\n    let texture = TGAImage::open("./obj/african_head_diffuse.tga");\n    let model = Model::load("./obj/african_head.obj").unwrap();\n    let light_dir = Vertex {\n        x: 0.0,\n        y: 0.0,\n        z: -1.0,\n    };\n    let mut zbuffer = vec![std::f32::MIN; (WIDTH * HEIGHT) as usize];\n    for i in 0..model.faces_len() {\n        let face = model.get_face(i);\n        let ver = [\n            model.get_vert(face[0][0]),\n            model.get_vert(face[0][1]),\n            model.get_vert(face[0][2]),\n        ];\n        let mut n = (ver[2] - ver[0]) ^ (ver[1] - ver[0]);\n        n.normalize();\n        let intensity = n * light_dir;\n        if intensity > 0.0 {\n            let screen_coords = [\n                world_to_screen(&ver[0]),\n                world_to_screen(&ver[1]),\n                world_to_screen(&ver[2]),\n            ];\n            let texture_coords = [\n                model.get_texture(face[1][0]),\n                model.get_texture(face[1][1]),\n                model.get_texture(face[1][2]),\n            ];\n            triangle(\n                &screen_coords[0],\n                &screen_coords[1],\n                &screen_coords[2],\n                &mut image,\n                &mut zbuffer,\n                intensity,\n                &texture,\n                texture_coords[0],\n                texture_coords[1],\n                texture_coords[2],\n            );\n        }\n    }\n    image.flip_vertically();\n    image.write("output.tga", true);\n}\n\n\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"alt text",src:t(6361).Z+"",width:"800",height:"800"})})]})}function x(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}},3752:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/3-1-80d465d76b6a8af24c48ae363c0cafe0.png"},6361:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/3-2-adf913e7655e841b415e5ef15debdbfb.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>o});var r=t(7294);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);